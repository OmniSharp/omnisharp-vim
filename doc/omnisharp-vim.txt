*omnisharp-vim.txt* OmniSharp support for Vim
*OmniSharp* *omnisharp* *omnisharp-vim*

===============================================================================
#                                                                             #
#   ██████╗ ███╗   ███╗███╗   ██╗██╗███████╗██╗  ██╗ █████╗ ██████╗ ██████╗   #
#  ██╔═══██╗████╗ ████║████╗  ██║██║██╔════╝██║  ██║██╔══██╗██╔══██╗██╔══██╗  #
#  ██║   ██║██╔████╔██║██╔██╗ ██║██║███████╗███████║███████║██████╔╝██████╔╝  #
#  ██║   ██║██║╚██╔╝██║██║╚██╗██║██║╚════██║██╔══██║██╔══██║██╔══██╗██╔═══╝   #
#  ╚██████╔╝██║ ╚═╝ ██║██║ ╚████║██║███████║██║  ██║██║  ██║██║  ██║██║       #
#   ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═══╝╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝       #
#                                                                             #
===============================================================================
CONTENTS                                                   *omnisharp-contents*

    1. Dependencies.................................|omnisharp-dependencies|
    2. Usage........................................|omnisharp-usage|
    3. Options......................................|omnisharp-options|
    4. Commands.....................................|omnisharp-commands|
    5. Integrations.................................|omnisharp-integrations|

===============================================================================
1. DEPENDENCIES                                        *omnisharp-dependencies*

Required:~
    - Vim 7.4 or higher with Python 2 or Python 3 support
    - Mono OR .NET Framework

Optional:~
    - See |omnisharp-integrations|

===============================================================================
2. USAGE                                                      *omnisharp-usage*

Opening a `*.cs` file will automatically start an instance of omnisharp-server
(if using vim 8.0+, neovim or vim-dispatch). Using omni completion will begin
the fsautocomplete process.

Suggestion: Install a completer such as NeoComplete or SuperTab

===============================================================================
3. OPTIONS                                                  *omnisharp-options*

                                                           *'g:OmniSharp_port'*
Always use this port when starting an OmniSharp server. Note that this means you
will be unable to run more than one OmniSharp server at a time.
Default: None >
    let g:OmniSharp_port = 2000
<

                                                   *'g:OmniSharp_start_server'*
Use this option to specify whether OmniSharp will start automatically upon
opening a `*.cs` file. Default: 1 >
    let g:OmniSharp_start_server = 1
<

                                             *'g:OmniSharp_server_config_name'*
Use this option to specify the OmniSharp server config filename.
Default: 'omnisharp.json' >
    let g:OmniSharp_server_config_name = 'omnisharp.json'
<

                                                    *'g:OmniSharp_server_path'*
Use this option to give the full path to the roslyn omnisharp server
executable. If not set, the |:OmniSharpInstall| location is used.
Default: '/home/username/.omnisharp/omnisharp-roslyn/run'
     or: 'C:\Users\username\.omnisharp\omnisharp-roslyn\OmniSharp.exe' >
    let g:OmniSharp_server_path = '/home/username/omnisharp/omnisharp.http-linux-x64/omnisharp/OmniSharp.exe'
<

                                                *'g:OmniSharp_server_use_mono'*
The roslyn server must be run with mono on Linux and OSX. The roslyn server
binaries usually come with an embedded mono, but this can be overridden to use
the installed mono with this option. Note that mono must be in the $PATH.
Default: 0 >
    let g:OmniSharp_server_use_mono = 1
<

                                                           *'g:OmniSharp_host'*
Use this option to specify the host address of the OmniSharp server. Using this
will not play well with the auto-start functionality, so you should probably set
g:OmniSharp_start_server = 0
Default: 'http://localhost:2000' >
    let g:OmniSharp_host = 'http://localhost:2000'
<

                                                       *'g:OmniSharp_loglevel'*
Sets the log level for the python code. Possible values are 'debug', 'info',
'warning', 'error', and 'critical'.
Default: warning >
    let g:OmniSharp_loglevel = 'warning'
<

                                                  *'g:OmniSharp_open_quickfix'*
By default, OmniSharp-vim opens the quickfix window when it is populated, e.g.
after find usages, implementations etc. Set this variable to 0 to prevent the
quickfix window being opened automatically.
Default: 1 >
    let g:OmniSharp_open_quickfix = 0
<

                                                      *'g:OmniSharp_sln_ports'*
Mapping of solution file to port. When auto-starting the OmniSharp server, it
will bind to the port listed here if the solution file matches. If there is no
match, the port will be chosen at random.
Default: {} >
    let g:OmniSharp_sln_ports = {
      \ 'C:\path\to\myproject.sln': 2003,
      \ }
<

                                                       *'b:OmniSharp_sln_path'*
Buffer specific custom solution file path. This setting can be useful if your
project's solution file is generated or cannot be easily located by OmniSharp
search algorithm.
Default: None >
    let b:OmniSharp_sln_path = 'C:\path\to\myproject.sln'
<
                                                        *'g:OmniSharp_timeout'*
Use this option to specify the time (in seconds) to wait for a response from the
server. Default: 1 >
    let g:OmniSharp_timeout = 1
<

                                           *'g:OmniSharp_translate_cygwin_wsl'*
Use this option when vim is running in a Cygwin or Windows Subsystem for Linux
environment on Windows, but the omnisharp server is a Windows binary. When set
to 1, omnisharp-vim will translate the cygwin/WSL unix paths into Windows paths
and back.
Default: 0 >
    let g:OmniSharp_translate_cygwin_wsl = 1
<

                                            *'g:OmniSharp_typeLookupInPreview'*
Use this option to specify whether type lookups display in Vim's Preview Window.
Type lookups will display in the status line if this is `0`. Default: 0 >
    let g:OmniSharp_typeLookupInPreview = 0
<

                                                   *'g:OmniSharp_want_snippet'*
Use this option to enable snippet completion. Requires `completeopt-=preview`.
Default: 0 >
    let g:OmniSharp_want_snippet = 0
<

                                    *'g:omnicomplete_fetch_full_documentation'*
Use this option to specify whether OmniSharp will fetch full documentation on
completion suggestions. By default, only type/method signatures are fetched for
performance reasons. Full documentation can still be fetched when needed using
the |:OmniSharpDocumentation| command. Default: 0 >
    let g:omnicomplete_fetch_full_documentation = 0
<

                                                    *'g:syntastic_cs_checkers'*
Use this option to enable syntastic integration >
    let g:syntastic_cs_checkers = ['code_checker']
<

                                                    *'g:OmniSharp_selector_ui'*
Use this option to specify a selector UI for choosing code actions and
navigating to symbols. When no selector UI plugin is detected, or
g:OmniSharp_selector_ui is set to '', then the vim command-line and quickfix
window will be used instead.
Default: Whichever of unite.vim, ctrlp.vim or fzf.vim is installed, or '' if
none are. >
    let g:OmniSharp_selector_ui = 'unite'
    OR
    let g:OmniSharp_selector_ui = 'ctrlp'
    OR
    let g:OmniSharp_selector_ui = 'fzf'
    OR
    let g:OmniSharp_selector_ui = ''
<

===============================================================================
4. COMMANDS                                                *omnisharp-commands*

                                                     *:OmniSharpGotoDefinition*
:OmniSharpGotoDefinition
    Navigates to the definition of the symbol under the cursor

                                                *:OmniSharpFindImplementations*
:OmniSharpFindImplementations
    Fills quicklist with implementations of interface/class under the cursor
    NOTE: Navigates to implementation if only one is found

                                                         *:OmniSharpFindSymbol*
:OmniSharpFindSymbol
    Fuzzy-search through symbols
    NOTE: Requires CtrlP, unite.vim or fzf.vim

                                                         *:OmniSharpFindUsages*
:OmniSharpFindUsages
    Fills quicklist with usages of symbol under the cursor
    NOTE: Navigates to usage if only one is found

                                                        *:OmniSharpFindMembers*
:OmniSharpFindMembers
    Fills quicklist with members in current file

                                                          *:OmniSharpFixUsings*
:OmniSharpFixUsings
    Removes unused using directives

                                                         *:OmniSharpTypeLookup*
:OmniSharpTypeLookup
    Displays the type name or method signature of the symbol under the cursor

                                                      *:OmniSharpDocumentation*
:OmniSharpDocumentation
    Opens the documentation for the symbol under the cursor
    NOTE: Opens in an `__OmniSharpScratch__` buffer at the bottom of the screen

                                                      *:OmniSharpSignatureHelp*
:OmniSharpSignatureHelp
    Opens the documentation for the method argument under the cursor
    NOTE: Opens in an `__OmniSharpScratch__` buffer at the bottom of the screen

                                                         *:OmniSharpNavigateUp*
:OmniSharpNavigateUp
    Navigates to previous method or class

                                                       *:OmniSharpNavigateDown*
:OmniSharpNavigateDown
    Navigates to next method or class

                                                      *:OmniSharpOpenPythonLog*
:OmniSharpOpenPythonLog
    Open the python log file

                                                     *:OmniSharpGetCodeActions*
:OmniSharpGetCodeActions
    Fuzzy-serach through available code actions
    NOTE: Requires CtrlP, unite.vim or fzf.vim

                                                             *:OmniSharpRename*
:OmniSharpRename
    Renames symbol under cursor

                                                         *:OmniSharpCodeFormat*
:OmniSharpCodeFormat
    Formats code

                                                  *:OmniSharpRestartAllServers*
:OmniSharpRestartAllServers
    Restarts all running OmniSharp servers
    NOTE: Requires vim 8.0+, neovim or vim-dispatch

                                                      *:OmniSharpRestartServer*
:OmniSharpRestartServer
    Restarts the OmniSharp server
    NOTE: Requires vim 8.0+, neovim or vim-dispatch

                                                        *:OmniSharpStartServer*
:OmniSharpStartServer
    Starts the OmniSharp server
    NOTE: Requires vim 8.0+, neovim or vim-dispatch

                                                     *:OmniSharpStopAllServers*
:OmniSharpStopAllServers
    Stops all running OmniSharp servers
    NOTE: Requires vim 8.0+, neovim or vim-dispatch

                                                         *:OmniSharpStopServer*
:OmniSharpStopServer
    Stops the OmniSharp server
    NOTE: Requires vim 8.0+, neovim or vim-dispatch

                                                     *:OmniSharpHighlightTypes*
:OmniSharpHighlightTypes
    Enable advanced type highlighting for current file

                                                            *:OmniSharpInstall*
:OmniSharpInstall
    Download the latest OmniSharp-roslyn binaries and extract them into
    ~/.omnisharp/omnisharp-roslyn. This can be used to install OmniSharp-roslyn
    initially, and to upgrade to the latest version at any time.
    Requires "curl" to be installed for Linux, macOS, Cygwin and WSL.

===============================================================================
5. INTEGRATIONS                                        *omnisharp-integrations*

5.1 CtrlP, unite.vim, fzf.vim~

If one of these plugins is detected, it will be used as the selection UI. See
|'g:OmniSharp_selector_ui'| for more.

5.2 ALE~

If ALE is installed, it will automatically be used to asynchronously check your
code for errors

5.3 Syntastic~

If you don't have ALE, you can use Syntastic (which is a synchronous code
checker). The following configuration is required to enable it:
>
    let g:syntastic_cs_checkers = ['code_checker']
<
5.4 Deoplete~

An omnisharp source is provided for the Deoplete completion engine. If Deoplete
is installed, configure it to use the "omnisharp" source:
>
  call deoplete#custom#option('sources', {
    \ 'cs': ['omnisharp'],
    \ })
<
===============================================================================
